# -*- coding: utf-8 -*-
"""Vehicle_CO2_Emissions_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eHg92Q1fKCakdYEKWtjKADKRnynwH_a1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Step 1: Load the dataset
df = pd.read_csv("C:\Vehicle_CO2_Emissions_prediction\co2.csv")
df.head()

df.info()

df.describe()

df.isnull().sum()

df.drop(columns=["Make"], inplace=True)
df.head()

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
for i in ["Model","Vehicle Class","Transmission","Fuel Type"]:
  df[i] = label_encoder.fit_transform(df[i])

# Step 3: Separate x and y  features and target variable
from sklearn.model_selection import train_test_split
x = df.drop(columns=["CO2 Emissions(g/km)"])  # Features
y = df["CO2 Emissions(g/km)"]  # Target variable

x

# Step 4: Split data into training and testing sets (80% train, 20% test)
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=42)

# Step 5: Normalize the data to improve model performance
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
xtrain = scaler.fit_transform(xtrain)
xtest = scaler.transform(xtest)

xtrain

# Step 6: Train the Logistic Regression model
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(xtrain, ytrain)

# Step 7: Make predictions
ypred = model.predict(xtest)

# Step 8: Evaluate the model
from sklearn.metrics import accuracy_score, classification_report,confusion_matrix
accuracy = accuracy_score(ytest, ypred)
conf_matrix = confusion_matrix(ytest, ypred)
class_report = classification_report(ytest, ypred)
# Print results
print("Accuracy:", accuracy)
print("Classification Report:\n", class_report)

from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier()
dt.fit(xtrain, ytrain)
ypred=dt.predict(xtest)
print("Using DT", classification_report(ytest,ypred))

from sklearn.svm import SVC
svm = SVC()
svm.fit(xtrain, ytrain)
ypred=svm.predict(xtest)
print("Using SVM", classification_report(ytest,ypred))

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier()
rf.fit(xtrain, ytrain)
ypred=rf.predict(xtest)
print("Using RF", classification_report(ytest,ypred))

import pickle
from sklearn.linear_model import LogisticRegression

# Example model
model = LogisticRegression()
model.fit([[1, 2], [3, 4]], [0, 1])  # Dummy data

# Save the model
with open("model.pkl", "wb") as file:
    pickle.dump(model, file)

with open("model.pkl", "rb") as file:
    loaded_model = pickle.load(file)

# Use the loaded model
print(loaded_model.predict([[1, 2]]))